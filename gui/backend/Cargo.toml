[package]
name = "g_dar2oar"
version.workspace = true
description = "DAR to OAR Converter GUI"
authors.workspace = true
categories.workspace = true
keywords = ["converter", "skyrim", "gui"]
readme = "./readme.md"
license.workspace = true
repository.workspace = true
edition.workspace = true
rust-version.workspace = true

[package.metadata.dist]
dist = false # To run CI and build separately from CLI (cargo dist)

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[build-dependencies]
tauri-build = { version = "2.0.1", features = [] }

[dependencies]
chrono = "0.4.38"
dar2oar_core = { workspace = true, features = ["tracing"] }
once_cell = "1.20.1"
serde = { workspace = true, features = ["derive"] }         # Implement (De)Serializer
serde_json = { workspace = true }                           # To avoid generate_context error.
snafu = { workspace = true }                                # Implement error types
tauri = { version = "2.0.1", features = ["devtools", "native-tls"] }      # For GUI
tauri-plugin-dialog = "2.0.1"                               # https://github.com/tauri-apps/plugins-workspace
tauri-plugin-fs = "2.0.1"
tauri-plugin-shell = "2.0.1"
tauri-plugin-window-state = "2.0.1"
tracing = { workspace = true }
tracing-subscriber = { workspace = true }

[dev-dependencies]
pretty_assertions = { workspace = true }
temp-dir = { workspace = true }
tracing-appender = { workspace = true }

[features]
# this feature is used for production builds or when `devPath` points to the filesystem and the built-in dev server is disabled.
# If you use cargo directly instead of tauri's cli you can use this feature flag to switch between tauri's `dev` and `build` modes.
# DO NOT REMOVE!!
custom-protocol = ["tauri/custom-protocol"]

[lints]
workspace = true
