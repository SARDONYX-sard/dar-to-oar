[package]
name = "g_dar2oar"
version.workspace = true
description = "DAR to OAR Converter GUI"
authors.workspace = true
categories.workspace = true
keywords = ["converter", "skyrim", "gui"]
readme = "./readme.md"
license.workspace = true
repository.workspace = true
edition.workspace = true
rust-version.workspace = true

[package.metadata.dist]
dist = false # To run CI and build separately from CLI (cargo dist)

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[build-dependencies]
tauri-build = { version = "1.5.5", features = [] }

[dependencies]
anyhow = { workspace = true }
chrono = "0.4.38"
dar2oar_core = { workspace = true, features = ["tracing"] }
once_cell = "1.19.0"
serde = { workspace = true, features = ["derive"] } # Implement (De)Serializer
tauri-plugin-window-state = { git = "https://github.com/tauri-apps/plugins-workspace", branch = "v1" }
tauri = { version = "1.8.0", features = [
  "devtools",
  "dialog-open",
  "dialog-save",
  "fs-all",
  "path-all",
  "shell-all",
] } # For GUI
tracing = { workspace = true }
tracing-subscriber = { workspace = true }

[dev-dependencies]
pretty_assertions = "1.4.1"
temp-dir = "0.1.13"
tracing-appender = "0.2.3"

[features]
# this feature is used for production builds or when `devPath` points to the filesystem and the built-in dev server is disabled.
# If you use cargo directly instead of tauri's cli you can use this feature flag to switch between tauri's `dev` and `build` modes.
# DO NOT REMOVE!!
custom-protocol = ["tauri/custom-protocol"]

[lints]
workspace = true
