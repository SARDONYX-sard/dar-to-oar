name: Cargo Lint & Test

on:
  push:
    branches: ['main']
  pull_request:
    branches: '*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-20.04, windows-latest]
    runs-on: ${{ matrix.platform }}

    steps:
      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        # You can remove libayatana-appindicator3-dev if you don't use the system tray feature.
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libayatana-appindicator3-dev librsvg2-dev
      - uses: actions/checkout@v4
      - name: Rust cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Install components
        run: |
          rustup component add clippy
          rustup component add rustfmt
      - name: Format Check
        run: cargo fmt --all -- --check
      - name: Lint Check
        run: cargo clippy --workspace -- -D warnings
      - name: Test(Rust)
        run: cargo test --workspace

      - name: Sync node version
        uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'
      - name: Build Test(CLI)
        run: cargo build --release

      - name: Node.js cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/frontend/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
      - name: Install frontend dependencies
        run: npm install

      - name: Test(Node.js)
        run: npm test
      - name: Build Test(GUI)
        run: npm run build

      - name: Make outputs dir
        run: mkdir -p ./build
      - name: Compress outputs(Windows)
        shell: pwsh
        if: runner.os == 'Windows'
        run: |
          $compress = @{
          LiteralPath= "./target/release/g_dar2oar.exe", "./target/release/dar2oar.exe"
          CompressionLevel = "Fastest"
          DestinationPath = "./build/g_dar2oar-${{ runner.os}}.zip"
          }
          Compress-Archive @compress
      - name: Compress outputs(MacOS)
        shell: bash
        if: runner.os == 'macOS'
        run: tar -czvf ./build/g_dar2oar-${{ runner.os}}.tar.gz ./target/release/g_dar2oar ./target/release/dar2oar
      - name: Compress outputs(Linux)
        shell: bash
        if: runner.os == 'Linux'
        # NOTE: Linux was excluded because the location of the GUI could not be identified.
        run: tar -czvf ./build/g_dar2oar-${{ runner.os}}.tar.gz ./target/release/dar2oar

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.1.3
        with:
          name: DAR to OAR Converter-${{runner.os}}
          path: |
            ./build/
